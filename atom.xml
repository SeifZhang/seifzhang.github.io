<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SeifZhang&#39;s Blog</title>
  <subtitle>A girl，just a simple girl!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seifzhang.jerrychia.com/"/>
  <updated>2016-06-25T13:30:35.613Z</updated>
  <id>http://seifzhang.jerrychia.com/</id>
  
  <author>
    <name>SeifZhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>方法集合</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/23/1methods/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/23/1methods/</id>
    <published>2016-06-23T07:56:51.238Z</published>
    <updated>2016-06-25T13:30:35.613Z</updated>
    
    <content type="html">&lt;h2 id=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;a href=&quot;#字符数组转换成字符串的方法&quot; class=&quot;headerlink&quot; title=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;/a&gt;字符数组转换成字符串的方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;char[] chs = { &amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;e&amp;apos; };
String s1 = new String(chs);
String s2 = String.valueOf(chs);
StringBuffer sBuffer = new StringBuffer();
for (int i = 0; i &amp;lt; chs.length; i++) {
    sBuffer.append(chs[i]);
}
String s3 = sBuffer.toString();
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;HashSet-的使用&quot;&gt;&lt;a href=&quot;#HashSet-的使用&quot; class=&quot;headerlink&quot; title=&quot;HashSet()的使用&quot;&gt;&lt;/a&gt;HashSet()的使用&lt;/h2&gt;&lt;p&gt;leetcode中第202题（happy number）和217题,219题（contains duplicate）都用到了.&lt;br&gt;HashSet 是 Set 接口的常用实现类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`Set&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;Integer&amp;gt;();`    
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;它不允许出现重复元素；&lt;/li&gt;
&lt;li&gt;不保证和政集合中元素的顺序&lt;/li&gt;
&lt;li&gt;允许包含值为null的元素，但最多只能有一个null元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;HashMap-的使用&quot;&gt;&lt;a href=&quot;#HashMap-的使用&quot; class=&quot;headerlink&quot; title=&quot;HashMap()的使用&quot;&gt;&lt;/a&gt;HashMap()的使用&lt;/h2&gt;&lt;p&gt;leetcode中第219题（contains duplicate）用到了.&lt;br&gt;HashMap 是 Map 接口的常用实现类&lt;br&gt;    &lt;code&gt;Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();&lt;/code&gt;&lt;br&gt;存储实现：put(key,vlaue);&lt;br&gt;读取实现：get(key);&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-3-4的幂&quot;&gt;&lt;a href=&quot;#2-3-4的幂&quot; class=&quot;headerlink&quot; title=&quot;2,3,4的幂&quot;&gt;&lt;/a&gt;2,3,4的幂&lt;/h2&gt;&lt;p&gt;T231，T326，T342分别是有关2，3，4的幂的问题。用位操作，求3的幂不是用位操作。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Queue的使用&quot;&gt;&lt;a href=&quot;#Queue的使用&quot; class=&quot;headerlink&quot; title=&quot;Queue的使用&quot;&gt;&lt;/a&gt;Queue的使用&lt;/h2&gt;&lt;p&gt;Queue接口与List、Set同一级别，都是继承了Collection接口。LinkedList实现了Queue接 口。Queue接口窄化了对LinkedList的方法的访问权限（即在方法中的参数类型如果是Queue时，就完全只能访问Queue接口所定义的方法 了，而不能直接访问 LinkedList的非Queue的方法），以使得只有恰当的方法才可以使用。BlockingQueue 继承了Queue接口。&lt;/p&gt;
&lt;p&gt;队列是一种数据结构．它有两个基本操作：在队列尾部加人一个元素，和从队列头部移除一个元素：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add&lt;/strong&gt;        –增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常&lt;br&gt;&lt;strong&gt;remove&lt;/strong&gt;   –移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常&lt;br&gt;&lt;strong&gt;element&lt;/strong&gt;  –返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常&lt;br&gt;&lt;strong&gt;offer&lt;/strong&gt;       –添加一个元素并返回true       如果队列已满，则返回false&lt;br&gt;&lt;strong&gt;poll&lt;/strong&gt;         –移除并返问队列头部的元素    如果队列为空，则返回null&lt;br&gt;&lt;strong&gt;peek&lt;/strong&gt;       –返回队列头部的元素             如果队列为空，则返回null&lt;br&gt;&lt;strong&gt;put&lt;/strong&gt;         –添加一个元素                      如果队列满，则阻塞&lt;br&gt;&lt;strong&gt;take&lt;/strong&gt;        –移除并返回队列头部的元素     如果队列为空，则阻塞&lt;/p&gt;
&lt;p&gt;remove、element、offer 、poll、peek 其实是属于Queue接口。 &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##寻找单链表中间节点，快慢指针法&lt;br&gt;第一步，有两个指针同时从头开始遍历。第二步，一个快指针一次走2步，一个慢指针一次走一步。第三步，快指针先到链表尾部，而慢指针则恰好到达链表中部。（快指针到链表尾部时，当链表长度为奇数时，慢指针指向的即是链表中间指针，当链表长度为偶数时，慢指针指向的结点和慢指针指向结点的下一个结点都是链表的中间结点）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void SearchMid(node* head, node* mid){
          node* temp = head;
          while(head-&amp;gt;next-&amp;gt;next != NULL)
          {
                 head = head-&amp;gt;next-&amp;gt;next;
                 temp = temp-&amp;gt;next;
                 mid=temp;
          }
}
// 1、寻找中间的指针start--mid--end，使用快慢指针
        ListNode slow = head;
        ListNode fast = head;
        ListNode mid = null;
        while (fast != null &amp;amp;&amp;amp; fast.next != null) {// 循环条件缺一不可（缺少程序会崩溃），链表节点个数可能为为奇数或偶数
            slow = slow.next;// 慢指针走一步
            fast = fast.next.next;// 快指针走两步
        }
        mid = slow;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;a href=&quot;#字符数组转换成字符串的方法&quot; class=&quot;headerlink&quot; title=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;/a&gt;字符数组转换成字符串的方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;char[] chs = { &amp;ap
    
    </summary>
    
      <category term="Seif's Summery" scheme="http://seifzhang.jerrychia.com/categories/Seif-s-Summery/"/>
    
    
      <category term="文章" scheme="http://seifzhang.jerrychia.com/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Coding350_Intersection_of_Two_Arrays_II</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-350/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-350/</id>
    <published>2016-06-22T03:12:00.000Z</published>
    <updated>2016-06-23T07:37:43.161Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given nums1 = &lt;code&gt;[1, 2, 2, 1]&lt;/code&gt;, nums2 = &lt;code&gt;[2, 2]&lt;/code&gt;, return &lt;code&gt;[2, 2]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each element in the result should appear as many times as it shows in both arrays.&lt;/li&gt;
&lt;li&gt;The result can be in any order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if the given array is already sorted? How would you optimize your algorithm?&lt;/li&gt;
&lt;li&gt;What if nums1’s size is small compared to nums2’s size? Which algorithm is better?&lt;/li&gt;
&lt;li&gt;What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
      <category term="Sort" scheme="http://seifzhang.jerrychia.com/tags/Sort/"/>
    
      <category term="Binary Search" scheme="http://seifzhang.jerrychia.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Coding349_Intersection_of_Two_Arrays</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-349/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-349/</id>
    <published>2016-06-22T03:10:00.000Z</published>
    <updated>2016-06-23T07:34:49.737Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each element in the result must be unique.&lt;/li&gt;
&lt;li&gt;The result can be in any order.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
      <category term="Sort" scheme="http://seifzhang.jerrychia.com/tags/Sort/"/>
    
      <category term="Binary Search" scheme="http://seifzhang.jerrychia.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Coding345_Reverse_Vowels_of_a_String</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-345/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-345/</id>
    <published>2016-06-22T03:08:00.000Z</published>
    <updated>2016-06-23T07:32:35.585Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Write a function that takes a string as input and reverse only the vowels of a string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;Given s = “hello”, return “holle”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;Given s = “leetcode”, return “leotcede”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;快乐数（happy_number）有以下的特性：在给定的进位制下，该数字所有数位(digits)的平方和，得到的新数再次求所有数位的平方和，如此重复进行，最终结果必为1。&lt;br&gt;不是快乐数的数称为不快乐数（unhappy_number），所有不快乐数的数位平方和计算，最後都会进入 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 的循环中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;p&gt;public class Solution {&lt;br&gt;   public boolean isHappy(int n) {&lt;br&gt;        Set&lt;integer&gt; set = new HashSet&amp;lt;&amp;gt;();//set中不能有重复的元素&lt;br&gt;        while (n &amp;lt; Integer.MAX_VALUE) {&lt;br&gt;            if (set.contains(n)) {&lt;br&gt;                return false;&lt;br&gt;            } else {&lt;br&gt;                set.add(n);&lt;br&gt;            }&lt;br&gt;            n = digitSqure(n);&lt;br&gt;            if (n == 1) {&lt;br&gt;                return true;&lt;br&gt;            }&lt;br&gt;        }&lt;br&gt;        return false;&lt;br&gt;    }&lt;/integer&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private int digitSqure(int n) {
    int sum = 0;
    while (n != 0) {
        sum += Math.pow(n % 10, 2);
        n = n / 10;
    }
    return sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
      <category term="String" scheme="http://seifzhang.jerrychia.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Coding344_Reverse_String</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-344/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-344/</id>
    <published>2016-06-22T03:06:00.000Z</published>
    <updated>2016-06-23T07:56:41.546Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Write a function that takes a string as input and returns the string reversed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given s = “hello”, return “olleh”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    //直接用StringBuffer类中的reverse()函数
    public String reverseString1(String s) {
        StringBuffer sb = new StringBuffer(s);
        sb.reverse();
        return sb.toString();
    }
    //用两个指针
    public String reverseString(String s) {
        char[] chs = s.toCharArray();
        int i = 0;
        int j = chs.length - 1;
        while (i &amp;lt; j) {
            char temp = chs[i];
            chs[i] = chs[j];
            chs[j] = temp;
            i++;
            j--;
        }
        //字符数组变成字符串的用法
        // return new String(chs);
        return String.valueOf(chs);
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
      <category term="String" scheme="http://seifzhang.jerrychia.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Coding342_Power_of_Four</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-342/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-342/</id>
    <published>2016-06-22T03:04:00.000Z</published>
    <updated>2016-06-23T13:37:46.941Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an integer (signed 32 bits), write a function to check whether it is a power of 4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given num = 16, return true. Given num = 5, return false.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; Could you solve it without loops/recursion?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;不能用求2的幂的方法来求，因为第一个是1的情况也有可能是2的幂，而不是4的幂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Bit Manipulation" scheme="http://seifzhang.jerrychia.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Coding326_Power_of_Three</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-326/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-326/</id>
    <published>2016-06-22T03:02:00.000Z</published>
    <updated>2016-06-24T01:19:02.054Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an integer, write a function to determine if it is a power of three.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;Could you do it without using any loop / recursion?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;p&gt;3^0=1,3^1=3,3^2=9,3^3=27,3^4=81,3^5=243…&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    public boolean isPowerOfThree(int n) {
      if (n &amp;lt; 0) {
            return false;
        }
        double ret = Math.log10(n) / Math.log10(3);
        // 如果n=5,ret=1.4649735207179273,ret%1肯定不等于0
        //System.out.println(ret);
        if (ret % 1 == 0) {
            return true;
        } else {
            return false;
        }
        // 网上的一行代码
        // 1162261467 is 3^19, 3^20 is bigger than int
        // return ( n&amp;gt;0 &amp;amp;&amp;amp; 1162261467%n==0);
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Math" scheme="http://seifzhang.jerrychia.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Coding303_Range_Sum_Query - Immutable</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-303/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-303/</id>
    <published>2016-06-22T03:00:00.000Z</published>
    <updated>2016-06-23T07:21:22.140Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -&amp;gt; 1
sumRange(2, 5) -&amp;gt; -1
sumRange(0, 5) -&amp;gt; -3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.    You may assume that the array does not change.
2.    There are many calls to sumRange function.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://seifzhang.jerrychia.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Coding299_Bulls_and_Cows</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-299/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-299/</id>
    <published>2016-06-21T02:58:00.000Z</published>
    <updated>2016-06-23T07:18:23.835Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;You are playing the following &lt;a href=&quot;https://en.wikipedia.org/wiki/Bulls_and_Cows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bulls and Cows&lt;/a&gt; game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Secret number:  &amp;quot;1807&amp;quot;
Friend&amp;apos;s guess: &amp;quot;7810&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hint: &lt;code&gt;1&lt;/code&gt; bull and &lt;code&gt;3&lt;/code&gt; cows. (The bull is &lt;code&gt;8&lt;/code&gt;, the cows are &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;7&lt;/code&gt;.)&lt;br&gt;Write a function to return a hint according to the secret number and friend’s guess, use &lt;code&gt;A&lt;/code&gt; to indicate the bulls and &lt;code&gt;B&lt;/code&gt; to indicate the cows. In the above example, your function should return &lt;code&gt;&amp;quot;1A3B&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Please note that both secret number and friend’s guess may contain duplicate digits, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Secret number:  &amp;quot;1123&amp;quot;
Friend&amp;apos;s guess: &amp;quot;0111&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, the 1st &lt;code&gt;1&lt;/code&gt; in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return &lt;code&gt;&amp;quot;1A1B&amp;quot;&lt;/code&gt;.&lt;br&gt;You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Coding292_Nim_Game</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-292/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-292/</id>
    <published>2016-06-21T02:56:00.000Z</published>
    <updated>2016-06-23T07:13:39.588Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.&lt;/p&gt;
&lt;p&gt;Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.&lt;/p&gt;
&lt;p&gt;For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Brainteaser" scheme="http://seifzhang.jerrychia.com/tags/Brainteaser/"/>
    
  </entry>
  
  <entry>
    <title>Coding290_Word_Pattern</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-290/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-290/</id>
    <published>2016-06-21T02:54:00.000Z</published>
    <updated>2016-06-23T07:11:26.907Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given a &lt;code&gt;pattern&lt;/code&gt; and a string &lt;code&gt;str&lt;/code&gt;, find if &lt;code&gt;str&lt;/code&gt; follows the same pattern.&lt;/p&gt;
&lt;p&gt;Here &lt;strong&gt;follow&lt;/strong&gt; means a full match, such that there is a bijection between a letter in &lt;code&gt;pattern&lt;/code&gt; and a &lt;strong&gt;non-empty&lt;/strong&gt; word in &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;abba&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog cat cat dog&amp;quot;&lt;/code&gt;should return true.&lt;/li&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;abba&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog cat cat fish&amp;quot;&lt;/code&gt; should return false.&lt;/li&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;aaaa&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog cat cat dog&amp;quot;&lt;/code&gt; should return false.&lt;/li&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;abba&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog dog dog dog&amp;quot;&lt;/code&gt; should return false.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;br&gt;You may assume &lt;code&gt;pattern&lt;/code&gt; contains only lowercase letters, and &lt;code&gt;str&lt;/code&gt; contains lowercase letters separated by a single space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Coding283_Move_Zeroes</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-283/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-283/</id>
    <published>2016-06-21T02:52:00.000Z</published>
    <updated>2016-06-23T07:07:54.587Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt;, write a function to move all &lt;code&gt;0&lt;/code&gt;‘s to the end of it while maintaining the relative order of the non-zero elements.&lt;/p&gt;
&lt;p&gt;For example, given &lt;code&gt;nums = [0, 1, 0, 3, 12]&lt;/code&gt;, after calling your function, &lt;code&gt;nums&lt;/code&gt; should be &lt;code&gt;[1, 3, 12, 0, 0]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You must do this &lt;strong&gt;in-place&lt;/strong&gt; without making a copy of the array.&lt;/li&gt;
&lt;li&gt;Minimize the total number of operations.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Array" scheme="http://seifzhang.jerrychia.com/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Coding278_First_Bad_Version</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-278/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-278/</id>
    <published>2016-06-21T02:50:00.000Z</published>
    <updated>2016-06-23T07:04:55.635Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.&lt;/p&gt;
&lt;p&gt;Suppose you have &lt;code&gt;n&lt;/code&gt; versions &lt;code&gt;[1, 2, ..., n]&lt;/code&gt; and you want to find out the first bad one, which causes all the following ones to be bad.&lt;/p&gt;
&lt;p&gt;You are given an API &lt;code&gt;bool isBadVersion(version)&lt;/code&gt;which will return whether &lt;code&gt;version&lt;/code&gt; is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Binary Search" scheme="http://seifzhang.jerrychia.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Coding263_Ugly_Number</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-263/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-263/</id>
    <published>2016-06-21T02:48:00.000Z</published>
    <updated>2016-06-23T07:04:19.371Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are positive numbers whose prime factors only include&lt;code&gt;2, 3, 5&lt;/code&gt;. For example, &lt;code&gt;6, 8&lt;/code&gt;are ugly while&lt;code&gt;14&lt;/code&gt;is not ugly since it includes another prime factor &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;1&lt;/code&gt;is typically treated as an ugly number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Math" scheme="http://seifzhang.jerrychia.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Coding258_Add_Digits</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-258/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-258/</id>
    <published>2016-06-21T02:46:00.000Z</published>
    <updated>2016-06-23T06:58:30.395Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given &lt;code&gt;num = 38&lt;/code&gt;, the process is like: &lt;code&gt;3 + 8 = 11&lt;/code&gt;, &lt;code&gt;1 + 1 = 2&lt;/code&gt;. Since&lt;code&gt;2&lt;/code&gt; has only one digit, return it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;Could you do it without any loop/recursion in O(1) runtime?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A naive implementation of the above process is trivial. Could you come up with other methods?&lt;/li&gt;
&lt;li&gt;What are all the possible results?&lt;/li&gt;
&lt;li&gt;How do they occur, periodically or randomly?&lt;/li&gt;
&lt;li&gt;You may find this &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_root&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia article&lt;/a&gt; useful.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Math" scheme="http://seifzhang.jerrychia.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Coding257_Binary_Tree_Paths</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-257/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-257/</id>
    <published>2016-06-21T02:44:00.000Z</published>
    <updated>2016-06-23T08:18:51.427Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return all root-to-leaf paths.&lt;/p&gt;
&lt;p&gt;For example, given the following binary tree:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   1
 /   \
2     3
\
  5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All root-to-leaf paths are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;quot;1-&amp;gt;2-&amp;gt;5&amp;quot;, &amp;quot;1-&amp;gt;3&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Tree" scheme="http://seifzhang.jerrychia.com/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://seifzhang.jerrychia.com/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>Coding242_Valid_Anagram</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-242/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-242/</id>
    <published>2016-06-21T02:42:00.000Z</published>
    <updated>2016-06-23T06:48:40.418Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given two strings s and t, write a function to determine if t is an anagram of s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For example,&lt;/strong&gt;&lt;br&gt;s = “anagram”, t = “nagaram”, return true.&lt;br&gt;s = “rat”, t = “car”, return false.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;You may assume the string contains only lowercase alphabets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;What if the inputs contain unicode characters? How would you adapt your solution to such case?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
      <category term="Sort" scheme="http://seifzhang.jerrychia.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>Coding237_Delete_Node_in_a_Linked_List</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-237/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-237/</id>
    <published>2016-06-21T02:40:00.000Z</published>
    <updated>2016-06-23T06:45:51.194Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.&lt;/p&gt;
&lt;p&gt;Supposed the linked list is &lt;code&gt;1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4&lt;/code&gt;and you are given the third node with value 3, the linked list should become&lt;code&gt;1 -&amp;gt; 2 -&amp;gt; 4&lt;/code&gt;after calling your function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="LinkedList" scheme="http://seifzhang.jerrychia.com/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>Coding235_Lowest_Common_Ancestor_of_a_Binary Search Tree</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-235/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-235/</id>
    <published>2016-06-21T02:38:00.000Z</published>
    <updated>2016-06-25T13:22:44.052Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.&lt;/p&gt;
&lt;p&gt;According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     _______6______
    /              \
 ___2__          ___8__
/      \        /      \
0      _4       7       9
      /  \
      3   5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意是&lt;strong&gt;二分查找树&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二叉查找树或者是一棵空树，或者是具有下列性质的二叉树：&lt;br&gt;（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；&lt;br&gt;（2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；&lt;br&gt;（3）左、右子树也分别为二叉查找树；&lt;br&gt;（4）没有键值相等的节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先判断入口是否有非法输入。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果某一个root==p || root == q，那么LCA肯定是root（因为是top down，LCA肯定在root所囊括的树上，而root又是p q其中一个节点了，那么另外一个节点肯定在root之下，那么root就是LCA），那么返回root&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果root&amp;lt;min(p, q)，那么LCA肯定在右子树上，那么递归&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果max(p, q)&amp;lt;root，那么LCA肯定在左子树上，那么递归&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果p&amp;lt;root&amp;lt;q，那么root肯定为LCA&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || p == null || q == null) {
            return null;
        }
        if ((root.val - p.val) * (q.val - root.val) &amp;gt;= 0) {
            return root;
        }
        if (root.val &amp;gt;= p.val) {
            return lowestCommonAncestor(root.left, p, q);
        }
        return lowestCommonAncestor(root.right, p, q);
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Tree" scheme="http://seifzhang.jerrychia.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Coding234_Palindrome_Linked_List</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-234/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-234/</id>
    <published>2016-06-21T02:36:00.000Z</published>
    <updated>2016-06-25T10:46:10.542Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given a singly linked list, determine if it is a palindrome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;Could you do it in O(n) time and O(1) space?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;判断一个单向链表是否是回文链表，要求O（n）的时间复杂度和O（1）的空间复杂度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遍历整个链表，将链表每个节点的值记录在数组中，再判断数组是不是一个回文数组，时间复杂度为O（n），空间复杂度也为O（n）。&lt;/li&gt;
&lt;li&gt;利用栈先进后出的性质，将链表前半段压入栈中，再逐个弹出与链表后半段比较。时间复杂度O（n），但仍然需要n/2的栈空间，空间复杂度为O（n）。&lt;/li&gt;
&lt;li&gt;反转链表法，将链表后半段原地翻转，再将前半段、后半段依次比较，判断是否相等，时间复杂度O（n），空间复杂度为O（1）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
 // 此法不对，因为是在一个单链表上操作；p2 = reverseList(head);相当于是在另一个链表上操作了
    public boolean isPalindrome1(ListNode head) {
        if (head == null)
            return true;
        ListNode p1 = head;
        ListNode p2 = null;
        p2 = reverseList(head);
        while ((p1.next != null) &amp;amp;&amp;amp; (p2.next != null)) {
            if (p1.val != p2.val) {
                return false;
            }
            p1 = p1.next;
            p2 = p2.next;
        }
        return true;
    }

    public boolean isPalindrome(ListNode head) {
        if (head == null)
            return true;
        // 1、寻找中间的指针start--mid--end，使用快慢指针
        ListNode slow = head;
        ListNode fast = head;
        ListNode mid = null;
        while (fast != null &amp;amp;&amp;amp; fast.next != null) {// 循环条件缺一不可（缺少程序会崩溃），链表节点个数可能为为奇数或偶数
            slow = slow.next;// 慢指针走一步
            fast = fast.next.next;// 快指针走两步
        }
        mid = slow;
        // 2、然后把中间到最后的链表反转start--end--mid(mid_new)
        ListNode mid_new = reverseList(mid);
        // 3、然后start--mid_new与end--mid_new比较
        while (mid_new != null &amp;amp;&amp;amp; head != null) {
            if (mid_new.val != head.val) {
                return false;
            }
            mid_new = mid_new.next;
            head = head.next;
        }
        return true;
    }

    public ListNode reverseList(ListNode head) {
        ListNode preHead = new ListNode(-1);
        preHead.next = head;
        ListNode tmp, p;
        if (head == null) {
            return null;
        }
        tmp = preHead.next;
        while (tmp.next != null) {
            p = tmp.next;
            tmp.next = p.next;
            p.next = preHead.next;
            preHead.next = p;
        }
        return preHead.next;
    }

    public ListNode reverseList1(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode tmp = head.next;
            head.next = prev;
            prev = head;
            head = tmp;
        }
        return prev;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
      <category term="LinkedList" scheme="http://seifzhang.jerrychia.com/tags/LinkedList/"/>
    
  </entry>
  
</feed>
