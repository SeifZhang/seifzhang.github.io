<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SeifZhang&#39;s Blog</title>
  <subtitle>A girl，just a simple girl!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seifzhang.jerrychia.com/"/>
  <updated>2016-08-11T05:59:16.139Z</updated>
  <id>http://seifzhang.jerrychia.com/</id>
  
  <author>
    <name>SeifZhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Coding18_4Sum</title>
    <link href="http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-18/"/>
    <id>http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-18/</id>
    <published>2016-07-12T01:16:59.000Z</published>
    <updated>2016-08-11T05:59:16.139Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;p&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The solution set must not contain duplicate quadruplets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
      [-1,  0, 0, 1],
      [-2, -1, 1, 2],
      [-2,  0, 0, 2]
]
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;两数相加得一个特定数，返回两数的索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    public int[] twoSum(int[] nums, int target) {
          for (int i = 0; i &amp;lt; nums.length; i++) {
            for (int j = i + 1; j &amp;lt; nums.length; j++) {
                if ((nums[i] + nums[j]) == target) {
                    return new int[] { i, j };
                }
            }
        }
    return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Array" scheme="http://seifzhang.jerrychia.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Coding16_3Sum_Closest</title>
    <link href="http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-16/"/>
    <id>http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-16/</id>
    <published>2016-07-12T01:12:59.000Z</published>
    <updated>2016-07-13T10:59:48.004Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;p&gt;Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For example, given array S = {-1 2 1 -4}, and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;与三个数求和不同的是，不再是求三个数的和是不是为target，而是看三个数的和与target的差是否为最小，只需记录当前最优解并不断更新其值就可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {  
    public int threeSumClosest(int[] num, int target) {  
        if (num == null || num.length &amp;lt; 3) return 0;  

        Arrays.sort(num);  

        int ret = 0;  
        int closestDist = Integer.MAX_VALUE;  
        int len =  num.length;  
        for (int i = 0; i &amp;lt; len-2; i++) {  
            if (i &amp;gt; 0 &amp;amp;&amp;amp; num[i] == num[i-1]) continue;  

            int l = i+1, r = len-1;  
            while (l &amp;lt; r) {  
                int sum = num[i] + num[l] + num[r];  
                if (sum &amp;lt; target) {  
                    if (target-sum &amp;lt; closestDist) {  
                        closestDist = target - sum;  
                        ret = sum;  
                    }  
                    l++;  
                } else if (sum &amp;gt; target) {  
                    if (sum-target &amp;lt; closestDist) {  
                        closestDist = sum - target;  
                        ret = sum;  
                    }  
                    r--;  
                } else { //when sum == target, return sum.  
                    return sum;  
                }  
            }  
        }  

        return ret;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/ljiabin/article/details/40622607&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转自http://blog.csdn.net/ljiabin/article/details/40622607&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Array" scheme="http://seifzhang.jerrychia.com/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Coding15_3Sum</title>
    <link href="http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-15/"/>
    <id>http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-15/</id>
    <published>2016-07-12T01:10:59.000Z</published>
    <updated>2016-07-14T13:04:35.683Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;p&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The solution set must not contain duplicate triplets.&lt;/p&gt;
&lt;p&gt;For example, given array S = [-1, 0, 1, 2, -1, -4],&lt;/p&gt;
&lt;p&gt;A solution set is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  [-1, 0, 1],
  [-1, -1, 2]
]
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;考虑的是利用排序&lt;br&gt;先固定一个数，找另外两个数的和为此数的相反数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
     public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; threeSum(int[] nums) {
        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();
        Arrays.sort(nums);
        int start, end, temp;
        for (int i = 0; i &amp;lt; nums.length; i++) {
            if (i != 0 &amp;amp;&amp;amp; nums[i] == nums[i - 1])
                continue;
            // num 1：only reserve first of all same values
            int current = nums[i];
            start = i + 1;
            end = nums.length - 1;

            while (start &amp;lt; end) {
                if (start != i + 1 &amp;amp;&amp;amp; nums[start] == nums[start - 1]) {
                    // num2：only reserve first of all same values
                    start++;
                    continue;
                }
                temp = nums[start] + nums[end];

                if (temp == -current) { // find
                    List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;(3);
                    list.add(current);
                    list.add(nums[start]);
                    list.add(nums[end]);
                    result.add(list);
                    start++;
                    end--;
                } else if (temp &amp;gt; -current)
                    end--;
                else
                    start++;
            }
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Array" scheme="http://seifzhang.jerrychia.com/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Coding12_Integer_to_Roman</title>
    <link href="http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-12/"/>
    <id>http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-12/</id>
    <published>2016-07-12T01:08:59.000Z</published>
    <updated>2016-07-13T08:24:18.020Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;p&gt;Given an integer, convert it to a roman numeral.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;相同问题&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;【罗马数字】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1~9: {“I”, “II”, “III”, “IV”, “V”, “VI”, “VII”, “VIII”, “IX”};&lt;/p&gt;
&lt;p&gt;10~90: {“X”, “XX”, “XXX”, “XL”, “L”, “LX”, “LXX”, “LXXX”, “XC”};&lt;/p&gt;
&lt;p&gt;100~900: {“C”, “CC”, “CCC”, “CD”, “D”, “DC”, “DCC”, “DCCC”, “CM”};&lt;/p&gt;
&lt;p&gt;1000~3000: {“M”, “MM”, “MMM”}.&lt;br&gt;&lt;strong&gt;例如：3999—MMMCMXCIX——128—CXXVIII&lt;/strong&gt;&lt;br&gt;罗马数字规则：&lt;/p&gt;
&lt;p&gt;1， 罗马数字共有7个，即I（1）、V（5）、X（10）、L（50）、C（100）、D（500）和M（1000）。&lt;/p&gt;
&lt;p&gt;罗马数字中没有“0”。&lt;/p&gt;
&lt;p&gt;2， 重复次数：一个罗马数字最多重复3次。&lt;/p&gt;
&lt;p&gt;3， 右加左减：&lt;/p&gt;
&lt;p&gt;在较大的罗马数字的右边记上较小的罗马数字，表示大数字加小数字。&lt;/p&gt;
&lt;p&gt;在较大的罗马数字的左边记上较小的罗马数字，表示大数字减小数字。&lt;/p&gt;
&lt;p&gt;4， 左减的数字有限制，仅限于I、X、C，且放在大数的左边只能用一个。&lt;/p&gt;
&lt;p&gt;(*) V 和 X 左边的小数字只能用Ⅰ。&lt;/p&gt;
&lt;p&gt;(*) L 和 C 左边的小数字只能用X。&lt;/p&gt;
&lt;p&gt;(*) D 和 M 左 边的小数字只能用C。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
 public String intToRoman(int num) {
        String[][] RomanDict = new String[][] {
                { &amp;quot;&amp;quot;, &amp;quot;I&amp;quot;, &amp;quot;II&amp;quot;, &amp;quot;III&amp;quot;, &amp;quot;IV&amp;quot;, &amp;quot;V&amp;quot;, &amp;quot;VI&amp;quot;, &amp;quot;VII&amp;quot;, &amp;quot;VIII&amp;quot;, &amp;quot;IX&amp;quot; },
                { &amp;quot;&amp;quot;, &amp;quot;X&amp;quot;, &amp;quot;XX&amp;quot;, &amp;quot;XXX&amp;quot;, &amp;quot;XL&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;LX&amp;quot;, &amp;quot;LXX&amp;quot;, &amp;quot;LXXX&amp;quot;, &amp;quot;XC&amp;quot; },
                { &amp;quot;&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;CC&amp;quot;, &amp;quot;CCC&amp;quot;, &amp;quot;CD&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;DC&amp;quot;, &amp;quot;DCC&amp;quot;, &amp;quot;DCCC&amp;quot;, &amp;quot;CM&amp;quot; },
                { &amp;quot;&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;MM&amp;quot;, &amp;quot;MMM&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot; }, };
        // 3，2，1，0行分别处理千，百，十，个位
            return RomanDict[3][num / 1000] + 
            RomanDict[2][num % 1000 / 100] + 
            RomanDict[1][num % 100 / 10]+ 
            RomanDict[0][num % 10];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://my.oschina.net/Tsybius2014/blog/486752&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;摘自http://my.oschina.net/Tsybius2014/blog/486752&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Math" scheme="http://seifzhang.jerrychia.com/tags/Math/"/>
    
      <category term="String" scheme="http://seifzhang.jerrychia.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Coding5_Longest_Palindromic_Substring</title>
    <link href="http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-5/"/>
    <id>http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-5/</id>
    <published>2016-07-12T01:06:59.000Z</published>
    <updated>2016-07-13T07:26:38.491Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;p&gt;Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;中心扩展法：&lt;a href=&quot;http://blog.csdn.net/soszou/article/details/37312317&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完全参考&lt;/a&gt;&lt;br&gt;因为回文字符串是以中心轴对称的，所以如果我们从下标 i 出发，用2个指针向 i 的两边扩展判断是否相等，那么只需要对0到&lt;br&gt;n-1的下标都做此操作，就可以求出最长的回文子串。但需要注意的是，回文字符串有奇偶对称之分，即”abcba”与”abba”2种类型，&lt;br&gt;因此需要在代码编写时都做判断。&lt;br&gt;     设函数int Palindromic ( string &amp;amp;s, int i ,int j) 是求由下标 i 和 j 向两边扩展的回文串的长度，那么对0至n-1的下标，调用2次此函数：&lt;br&gt;     int lenOdd =  Palindromic( str, i, i ) 和 int lenEven = Palindromic (str , i , j )，即可求得以i 下标为奇回文和偶回文的子串长度。&lt;br&gt;     接下来以lenOdd和lenEven中的最大值与当前最大值max比较即可。&lt;br&gt;     这个方法有一个好处是时间复杂度为O(n2)，且不需要使用额外的空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
     public static String longestPalindrome(String s) {
        if (s.isEmpty()) {
            return null;
        }
        if (s.length() == 1) {
            return s;
        }
        String longest = s.substring(0, 1);
        for (int i = 0; i &amp;lt; s.length(); i++) {
            // 得到中心点i的最长回文
            String tmp = getPalindrome(s, i, i);
            if (tmp.length() &amp;gt; longest.length()) {
                longest = tmp;
            }
            // 得到中心点i,i+1的最长回文
            tmp = getPalindrome(s, i, i + 1);
            if (tmp.length() &amp;gt; longest.length()) {
                longest = tmp;
            }
        }
        return longest;
    }

    private static String getPalindrome(String s, int begin, int end) {
        while (begin &amp;gt;= 0 &amp;amp;&amp;amp; end &amp;lt;= s.length() - 1 &amp;amp;&amp;amp; s.charAt(begin) == s.charAt(end)) {
            begin--;
            end++;
        }
        String subStr = s.substring(begin + 1, end);
        return subStr;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="String" scheme="http://seifzhang.jerrychia.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Coding3_Longest_Substring_Without_Repeating_Characters</title>
    <link href="http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-3/"/>
    <id>http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-3/</id>
    <published>2016-07-12T01:04:59.000Z</published>
    <updated>2016-07-13T06:48:06.832Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given “abcabcbb”, the answer is “abc”, which the length is 3.&lt;/p&gt;
&lt;p&gt;Given “bbbbb”, the answer is “b”, with the length of 1.&lt;/p&gt;
&lt;p&gt;Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;基本思路是维护一个窗口，每次关注窗口中的字符串，在每次判断中，左窗口和右窗口选择其一向前移 动。同样是维护一个HashSet, 正常情况下移动右窗口，如果没有出现重复则继续移动右窗口，如果发现重复字符，则说明当前窗口中的串已经不满足要求，继续移动有窗口不可能得到更好的结 果，此时移动左窗口，直到不再有重复字符为止，中间跳过的这些串中不会有更好的结果，因为他们不是重复就是更短。因为左窗口和右窗口都只向前，所以两个窗 口都对每个元素访问不超过一遍，因此时间复杂度为O(2*n)=O(n),是线性算法。空间复杂度为HashSet的size,也是O(n).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0)
            return 0;
        HashSet&amp;lt;Character&amp;gt; set = new HashSet&amp;lt;Character&amp;gt;();
        int maxlen = 0;
        int start = 0;
        int end = 0;
        while (end &amp;lt; s.length()) {
            if (set.contains(s.charAt(end))) {
                if (maxlen &amp;lt; end - start)
                    maxlen = end - start;
                while (s.charAt(start) != s.charAt(end)) {
                    set.remove(s.charAt(start));
                    start++;
                }
                start++;
            } else
                set.add(s.charAt(end));
            end++;
        }
        maxlen = Math.max(maxlen, end - start);
        return maxlen;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
      <category term="String" scheme="http://seifzhang.jerrychia.com/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Coding2_Add_Two_Numbers</title>
    <link href="http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-2/"/>
    <id>http://seifzhang.jerrychia.com/2016/07/12/leetCode-OJ-2/</id>
    <published>2016-07-12T01:02:59.000Z</published>
    <updated>2016-07-13T03:35:48.245Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;p&gt;You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;br&gt;&lt;strong&gt;Output:&lt;/strong&gt; 7 -&amp;gt; 0 -&amp;gt; 8&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;方法1：将单链表l1存成long类型342，将单链表l2存成long类型465，然后相加得807，再依次将7,0,8存入单链表中。&lt;br&gt;方法2：用两个指针分别遍历两个链表，并用一个变量表示有无进位，若一个链表遍历结束后，将另一个链表直接连接到链表之后即可，若有进位则需要添加一位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    //方法1
    public ListNode addTwoNumbers1(ListNode l1, ListNode l2) {
        long a = 0, b = 0, temp = 1;
        while (l1 != null) {
            a = temp * l1.val + a;
            l1 = l1.next;
            temp = temp * 10;
        }
        System.out.println(a);
        temp = 1;
        while (l2 != null) {
            b = temp * l2.val + b;
            l2 = l2.next;
            temp = temp * 10;
        }
        System.out.println(b);
        long sum = a + b;
        System.out.println(sum);
        ListNode l3 = new ListNode((int) (sum % 10));
        sum = sum / 10;
        while (sum &amp;gt; 0) {
            insert((int) (sum % 10), l3);
            sum = sum / 10;
        }
        return l3;
    }

    private void insert(int i, ListNode l3) {
        ListNode tail = l3.next;
        if (tail != null) {
            while (tail.next != null) {
                tail = tail.next;
            }
        } else {
            tail = l3;
        }
        ListNode x = new ListNode(i);
        tail.next = x;
        tail = tail.next;
    }
    //方法2
    public ListNode addTwoNumbers2(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode l3 = new ListNode(0);
        ListNode p = l3;
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        while (l1 != null || l2 != null) {
            int var1 = 0;
            if (l1 != null) {
                var1 = l1.val;
                l1 = l1.next;
            }
            int var2 = 0;
            if (l2 != null) {
                var2 = l2.val;
                l2 = l2.next;
            }
            int tmp = var1 + var2 + carry;
            p.next = new ListNode(tmp % 10);
            carry = tmp / 10;
            p = p.next;
        }
        if (carry == 1) {
            p.next = new ListNode(1);
        }
        return l3.next;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Math" scheme="http://seifzhang.jerrychia.com/tags/Math/"/>
    
      <category term="LinkedList" scheme="http://seifzhang.jerrychia.com/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>方法集合</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/23/1methods/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/23/1methods/</id>
    <published>2016-06-23T07:56:51.238Z</published>
    <updated>2016-06-30T00:30:15.811Z</updated>
    
    <content type="html">&lt;h2 id=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;a href=&quot;#字符数组转换成字符串的方法&quot; class=&quot;headerlink&quot; title=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;/a&gt;字符数组转换成字符串的方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;char[] chs = { &amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;e&amp;apos; };
String s1 = new String(chs);
String s2 = String.valueOf(chs);
StringBuffer sBuffer = new StringBuffer();
for (int i = 0; i &amp;lt; chs.length; i++) {
    sBuffer.append(chs[i]);
}
String s3 = sBuffer.toString();
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;HashSet-的使用&quot;&gt;&lt;a href=&quot;#HashSet-的使用&quot; class=&quot;headerlink&quot; title=&quot;HashSet()的使用&quot;&gt;&lt;/a&gt;HashSet()的使用&lt;/h2&gt;&lt;p&gt;leetcode中&lt;strong&gt;T202&lt;/strong&gt;（happy number）和&lt;strong&gt;T217&lt;/strong&gt;,&lt;strong&gt;T219&lt;/strong&gt;（contains duplicate）都用到了.&lt;br&gt;HashSet 是 Set 接口的常用实现类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`Set&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;Integer&amp;gt;();`    
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;它不允许出现重复元素；&lt;/li&gt;
&lt;li&gt;不保证集合中元素的顺序&lt;/li&gt;
&lt;li&gt;允许包含值为null的元素，但最多只能有一个null元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;HashMap-的使用&quot;&gt;&lt;a href=&quot;#HashMap-的使用&quot; class=&quot;headerlink&quot; title=&quot;HashMap()的使用&quot;&gt;&lt;/a&gt;HashMap()的使用&lt;/h2&gt;&lt;p&gt;leetcode中&lt;strong&gt;T219&lt;/strong&gt;（contains duplicate）用到了.&lt;br&gt;HashMap 是 Map 接口的常用实现类&lt;br&gt;    &lt;code&gt;Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();&lt;/code&gt;&lt;br&gt;存储实现：put(key,vlaue);&lt;br&gt;读取实现：get(key);&lt;br&gt;&lt;code&gt;Object put(K key,V value)&lt;/code&gt;&lt;br&gt;向集合中添加指定值与指定键映射关系。&lt;br&gt;&lt;code&gt;putAll(Map m)&lt;/code&gt;&lt;br&gt;将指定映射M的所有映射关系复制到此映射中，这些映射关系将替换此映射目前针对指定映射中所有键的所有映射关系。&lt;br&gt;&lt;code&gt;Object get(Object K)&lt;/code&gt;&lt;br&gt;返回指定键在此标识哈希映射中所映射的值，如果存在指定的键对象则返回与该键对应的值对象;否则返null。&lt;br&gt;&lt;code&gt;void clear()&lt;/code&gt;&lt;br&gt;移除集合中所有的映射关系。&lt;br&gt;&lt;code&gt;int size()&lt;/code&gt;&lt;br&gt;返回集合中的键-值映射关系个数。&lt;br&gt;&lt;code&gt;int hashCode()&lt;/code&gt;&lt;br&gt;返回调用映射的散列码。&lt;br&gt;&lt;code&gt;Object clone()&lt;/code&gt;&lt;br&gt;返回此 HashMap 实例的浅表复制：并不克隆键和值本身。&lt;br&gt;&lt;code&gt;boolean equals(Object obj)&lt;/code&gt;&lt;br&gt;如果obj是一个map并包含相同的映射，则返回true.&lt;br&gt;&lt;code&gt;boolean containsKey(Object K)&lt;/code&gt;&lt;br&gt;如果映射中包含了作为键的K，则返回true。&lt;br&gt;&lt;code&gt;boolean containsValue(Object value)&lt;/code&gt;&lt;br&gt;如果映射中包含了作为值的V，则返回true。&lt;br&gt;&lt;code&gt;Set &amp;gt; entrySet()&lt;/code&gt;&lt;br&gt;返回此映射所包含的映射关系的 collection视图。&lt;br&gt;&lt;code&gt;boolean isEmpty()&lt;/code&gt;&lt;br&gt;如果此映射不包含键-值映射关系，也就是说映射是空的，则返回true。&lt;br&gt;&lt;code&gt;Set keySet()&lt;/code&gt;&lt;br&gt;返回此映射中所包含的键的set视图。&lt;br&gt;&lt;code&gt;remove(Object K)&lt;/code&gt;&lt;br&gt;删除关键字等于K的映射关系。&lt;br&gt;&lt;code&gt;Collection values()&lt;/code&gt;&lt;br&gt;返回此映射所包含的值的collection视图,也就是值的集合。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void main(String[] args){    
     HashMap hs=new HashMap();       
     hs.put(&amp;quot;name&amp;quot;, &amp;quot;张三&amp;quot;);       
     hs.put(&amp;quot;sex&amp;quot;, &amp;quot;男&amp;quot;);       
     hs.put(&amp;quot;age&amp;quot;, &amp;quot;30&amp;quot;);       
    hs.put(&amp;quot;home&amp;quot;, &amp;quot;河北&amp;quot;);    
    //测试是否包含关键字&amp;quot;name&amp;quot; 
    System.out.println(hs.containsKey(&amp;quot;name&amp;quot;));//返回true 
    System.out.println(hs.get(&amp;quot;name&amp;quot;));//返回  张三 
    System.out.println(hs.entrySet());//返回  [home=河北, sex=男, age=30, name=张三]  System.out.println(hs.hashCode()); //返回7960688 
    System.out.println(hs.keySet()); //返回 [home, sex, age, name] 

    //1 测试entrySet().的用法
    Iterator it=hs.entrySet().iterator();//迭代程序  
    while(it.hasNext())  
    {      
        System.out.println(it.next());  
    }                  

    //2 Set keySet()返回关键字各值的集合    
    it=hs.keySet().iterator();     
    while(it.hasNext())     
    {      
        System.out.println(hs.get(it.next()));    
    }                
    //返回结果如下：  


    //3 测试  values()的用法
    it=hs.values().iterator();     
    while(it.hasNext())     
    {      
        System.out.println(it.next());     
    }                 
    //返回结果如下：     
}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;2-3-4的幂&quot;&gt;&lt;a href=&quot;#2-3-4的幂&quot; class=&quot;headerlink&quot; title=&quot;2,3,4的幂&quot;&gt;&lt;/a&gt;2,3,4的幂&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;T231，T326，T342&lt;/strong&gt;分别是有关2，3，4的幂的问题。用位操作，求3的幂不是用位操作。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Queue的使用&quot;&gt;&lt;a href=&quot;#Queue的使用&quot; class=&quot;headerlink&quot; title=&quot;Queue的使用&quot;&gt;&lt;/a&gt;Queue的使用&lt;/h2&gt;&lt;p&gt;Queue接口与List、Set同一级别，都是继承了Collection接口。LinkedList实现了Queue接 口。Queue接口窄化了对LinkedList的方法的访问权限（即在方法中的参数类型如果是Queue时，就完全只能访问Queue接口所定义的方法 了，而不能直接访问 LinkedList的非Queue的方法），以使得只有恰当的方法才可以使用。BlockingQueue 继承了Queue接口。&lt;/p&gt;
&lt;p&gt;队列是一种数据结构．它有两个基本操作：在队列尾部加人一个元素，和从队列头部移除一个元素：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add&lt;/strong&gt;        –增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常&lt;br&gt;&lt;strong&gt;remove&lt;/strong&gt;   –移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常&lt;br&gt;&lt;strong&gt;element&lt;/strong&gt;  –返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常&lt;br&gt;&lt;strong&gt;offer&lt;/strong&gt;       –添加一个元素并返回true       如果队列已满，则返回false&lt;br&gt;&lt;strong&gt;poll&lt;/strong&gt;         –移除并返问队列头部的元素    如果队列为空，则返回null&lt;br&gt;&lt;strong&gt;peek&lt;/strong&gt;       –返回队列头部的元素             如果队列为空，则返回null&lt;br&gt;&lt;strong&gt;put&lt;/strong&gt;         –添加一个元素                      如果队列满，则阻塞&lt;br&gt;&lt;strong&gt;take&lt;/strong&gt;        –移除并返回队列头部的元素     如果队列为空，则阻塞&lt;/p&gt;
&lt;p&gt;remove、element、offer 、poll、peek 其实是属于Queue接口。 &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##寻找单链表中间节点，快慢指针法&lt;br&gt;第一步，有两个指针同时从头开始遍历。第二步，一个快指针一次走2步，一个慢指针一次走一步。第三步，快指针先到链表尾部，而慢指针则恰好到达链表中部。（快指针到链表尾部时，当链表长度为奇数时，慢指针指向的即是链表中间指针，当链表长度为偶数时，慢指针指向的结点和慢指针指向结点的下一个结点都是链表的中间结点）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void SearchMid(node* head, node* mid){
          node* temp = head;
          while(head-&amp;gt;next-&amp;gt;next != NULL)
          {
                 head = head-&amp;gt;next-&amp;gt;next;
                 temp = temp-&amp;gt;next;
                 mid=temp;
          }
}
// 1、寻找中间的指针start--mid--end，使用快慢指针
        ListNode slow = head;
        ListNode fast = head;
        ListNode mid = null;
        while (fast != null &amp;amp;&amp;amp; fast.next != null) {// 循环条件缺一不可（缺少程序会崩溃），链表节点个数可能为为奇数或偶数
            slow = slow.next;// 慢指针走一步
            fast = fast.next.next;// 快指针走两步
        }
        mid = slow;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;##对数字各位相加&lt;br&gt;&lt;strong&gt;T202与T258&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public int add(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num = num / 10;
    }
    return sum;
}

// 另一种使数字中各位上数字相加的方法
public int add1(int num) {
    String s = String.valueOf(num);
    char[] chs = s.toCharArray();
    int sum = 0;
    for (int i = 0; i &amp;lt; chs.length; i++) {
        sum += chs[i] - &amp;apos;0&amp;apos;;
    }
    return sum;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;a href=&quot;#字符数组转换成字符串的方法&quot; class=&quot;headerlink&quot; title=&quot;字符数组转换成字符串的方法&quot;&gt;&lt;/a&gt;字符数组转换成字符串的方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;char[] chs = { &amp;ap
    
    </summary>
    
      <category term="Seif's Summery" scheme="http://seifzhang.jerrychia.com/categories/Seif-s-Summery/"/>
    
    
      <category term="文章" scheme="http://seifzhang.jerrychia.com/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Coding371_Sum_of_Two_Integers</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-371/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-371/</id>
    <published>2016-06-22T03:14:00.000Z</published>
    <updated>2016-07-13T11:15:21.367Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator &lt;strong&gt;+&lt;/strong&gt; and &lt;strong&gt;-&lt;/strong&gt;.&lt;br&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given a = 1 and b = 2, return 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第一步不考虑进位，对每一位相加。0加0与 1加1的结果都0，0加1与1加0的结果都是1。我们可以注意到，这和异或的结果是一样的。对异或而言，0和0、1和1异或的结果是0，而0和1、1和0的异或结果是1。接着考虑第二步进位，对0加0、0加1、1加0而言，都不会产生进位，只有1加1时，会向前产生一个进位。此时我们可以想象成是两个数先做位与运算，然后再向左移动一位。只有两个数都是1的时候，位与得到的结果是1，其余都是0。第三步把前两个步骤的结果相加。如果我们定义一个函数，第三步就相当于输入前两步骤的结果来递归调用自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    public int getSum(int a, int b) {
         if(b == 0){
           return a;
       }
       int num1 = a ^ b;
       int num2 = (a &amp;amp; b)&amp;lt;&amp;lt;1;
       return getSum(num1, num2);
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Bit Manipulation" scheme="http://seifzhang.jerrychia.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Coding350_Intersection_of_Two_Arrays_II</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-350/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-350/</id>
    <published>2016-06-22T03:12:00.000Z</published>
    <updated>2016-06-28T08:39:53.576Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given nums1 = &lt;code&gt;[1, 2, 2, 1]&lt;/code&gt;, nums2 = &lt;code&gt;[2, 2]&lt;/code&gt;, return &lt;code&gt;[2, 2]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each element in the result should appear as many times as it shows in both arrays.&lt;/li&gt;
&lt;li&gt;The result can be in any order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if the given array is already sorted? How would you optimize your algorithm?&lt;/li&gt;
&lt;li&gt;What if nums1’s size is small compared to nums2’s size? Which algorithm is better?&lt;/li&gt;
&lt;li&gt;What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.Arrays;
public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1.length == 0)
            return nums1;
        if (nums2.length == 0)
            return nums2;
        Arrays.sort(nums1);
        Arrays.sort(nums2);

        ArrayList&amp;lt;Integer&amp;gt; myList = new ArrayList&amp;lt;Integer&amp;gt;();
        int i = 0, j = 0;
        while (i &amp;lt; nums1.length &amp;amp;&amp;amp; j &amp;lt; nums2.length) {
            if (nums1[i] &amp;lt; nums2[j]) {
                i++;
            } else if (nums1[i] &amp;gt; nums2[j]) {
                j++;
            } else {
                myList.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] result = new int[myList.size()];
        int k = 0;
        for (Integer num : myList) {
            result[k++] = num;
        }
        return result;
    }
    // 此法不能用
    public int[] intersect1(int[] nums1, int[] nums2) {
        if (nums1.length == 0)
            return nums1;
        if (nums2.length == 0)
            return nums2;
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        Hashtable&amp;lt;Integer, Integer&amp;gt; numbers = new Hashtable&amp;lt;Integer, Integer&amp;gt;();
        ArrayList&amp;lt;Integer&amp;gt; myList = new ArrayList&amp;lt;Integer&amp;gt;();
        for (int i = 0; i &amp;lt; nums1.length; i++) {
            numbers.put(nums1[i], i);
        }
        for (int j = 0; j &amp;lt; nums2.length; j++) {
            if (numbers.containsKey(nums2[j])) {
                myList.add(nums2[j]);
            }
        }
        int[] result = new int[myList.size()];
        int i = 0;
        for (Integer num : myList) {
            result[i++] = num;
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
      <category term="Sort" scheme="http://seifzhang.jerrychia.com/tags/Sort/"/>
    
      <category term="Binary Search" scheme="http://seifzhang.jerrychia.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Coding349_Intersection_of_Two_Arrays</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-349/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-349/</id>
    <published>2016-06-22T03:10:00.000Z</published>
    <updated>2016-06-28T08:20:58.599Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each element in the result must be unique.&lt;/li&gt;
&lt;li&gt;The result can be in any order.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;结果中每个元素是唯一的，可以想到set&lt;br&gt;结果中顺序不要求相同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
        Set&amp;lt;Integer&amp;gt; interset = new HashSet&amp;lt;&amp;gt;();
        for (int i = 0; i &amp;lt; nums1.length; i++) {
            if (!set.contains(nums1[i])) {
                set.add(nums1[i]);
            }
        }
        for (int j = 0; j &amp;lt; nums2.length; j++) {
            if (set.contains(nums2[j])) {
                interset.add(nums2[j]);
            }
        }
        int[] result = new int[interset.size()];
        int i = 0;
        for (Integer num : interset) {
            result[i++] = num;
        }
        return result;
    }

    // 别人提交的方法，觉得好，就拿来用了
    public int[] intersection1(int[] nums1, int[] nums2) {
        Set&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;
        while (i &amp;lt; nums1.length &amp;amp;&amp;amp; j &amp;lt; nums2.length) {
            if (nums1[i] &amp;lt; nums2[j]) {
                i++;
            } else if (nums1[i] &amp;gt; nums2[j]) {
                j++;
            } else {
                set.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] result = new int[set.size()];
        int k = 0;
        for (Integer num : set) {
            result[k++] = num;
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
      <category term="Sort" scheme="http://seifzhang.jerrychia.com/tags/Sort/"/>
    
      <category term="Binary Search" scheme="http://seifzhang.jerrychia.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Coding345_Reverse_Vowels_of_a_String</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-345/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-345/</id>
    <published>2016-06-22T03:08:00.000Z</published>
    <updated>2016-06-28T07:07:19.776Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Write a function that takes a string as input and reverse only the vowels of a string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;Given s = “hello”, return “holle”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;Given s = “leetcode”, return “leotcede”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;反转一个字符串中的元音&lt;br&gt;双指针问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
   public String reverseVowels(String s) {
        char[] chs = s.toCharArray();
        int i = 0, j = chs.length - 1;
        while (i &amp;lt;= j) {
            if (isVowel(chs[i]) &amp;amp;&amp;amp; isVowel(chs[j])) {
                char temp = chs[i];
                chs[i] = chs[j];
                chs[j] = temp;
                i++;
                j--;
            } else if (!isVowel(chs[i])) {
                i++;
            } else if (!isVowel(chs[j])) {
                j--;
            } else {
                i++;
                j--;
            }
        }
        StringBuffer sb = new StringBuffer();
        for (int j1 = 0; j1 &amp;lt; chs.length; j1++) {
            sb.append(chs[j1]);
        }
        return sb.toString();
    }

    public static boolean isVowel(char ch) {
        char[] chs = { &amp;apos;a&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;i&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;u&amp;apos;,&amp;apos;A&amp;apos;,&amp;apos;E&amp;apos;,&amp;apos;I&amp;apos;,&amp;apos;O&amp;apos;,&amp;apos;U&amp;apos; };
        for (int i = 0; i &amp;lt; chs.length; i++) {
            if (chs[i] == ch) {
                return true;
            }
        }
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="String" scheme="http://seifzhang.jerrychia.com/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Coding344_Reverse_String</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-344/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-344/</id>
    <published>2016-06-22T03:06:00.000Z</published>
    <updated>2016-06-23T07:56:41.546Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Write a function that takes a string as input and returns the string reversed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given s = “hello”, return “olleh”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    //直接用StringBuffer类中的reverse()函数
    public String reverseString1(String s) {
        StringBuffer sb = new StringBuffer(s);
        sb.reverse();
        return sb.toString();
    }
    //用两个指针
    public String reverseString(String s) {
        char[] chs = s.toCharArray();
        int i = 0;
        int j = chs.length - 1;
        while (i &amp;lt; j) {
            char temp = chs[i];
            chs[i] = chs[j];
            chs[j] = temp;
            i++;
            j--;
        }
        //字符数组变成字符串的用法
        // return new String(chs);
        return String.valueOf(chs);
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="String" scheme="http://seifzhang.jerrychia.com/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Coding342_Power_of_Four</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-342/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-342/</id>
    <published>2016-06-22T03:04:00.000Z</published>
    <updated>2016-06-30T00:30:04.138Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an integer (signed 32 bits), write a function to check whether it is a power of 4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given num = 16, return true. Given num = 5, return false.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; Could you solve it without loops/recursion?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;不能用求2的幂的方法来求，因为第一个是1的情况也有可能是2的幂，而不是4的幂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class lp342_Power_of_Four {
    public boolean isPowerOfFour(int num) {
        String string = Integer.toBinaryString(num);
        if (string.length() % 2 == 0) {
            return false;
        } else {
            if (string.replace(&amp;quot;0&amp;quot;, &amp;quot;&amp;quot;).length() == 1) {
                return true;
            } else
                return false;
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Bit Manipulation" scheme="http://seifzhang.jerrychia.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Coding326_Power_of_Three</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-326/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-326/</id>
    <published>2016-06-22T03:02:00.000Z</published>
    <updated>2016-06-24T01:19:02.054Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an integer, write a function to determine if it is a power of three.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;Could you do it without using any loop / recursion?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;p&gt;3^0=1,3^1=3,3^2=9,3^3=27,3^4=81,3^5=243…&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    public boolean isPowerOfThree(int n) {
      if (n &amp;lt; 0) {
            return false;
        }
        double ret = Math.log10(n) / Math.log10(3);
        // 如果n=5,ret=1.4649735207179273,ret%1肯定不等于0
        //System.out.println(ret);
        if (ret % 1 == 0) {
            return true;
        } else {
            return false;
        }
        // 网上的一行代码
        // 1162261467 is 3^19, 3^20 is bigger than int
        // return ( n&amp;gt;0 &amp;amp;&amp;amp; 1162261467%n==0);
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Math" scheme="http://seifzhang.jerrychia.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Coding303_Range_Sum_Query - Immutable</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-303/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/22/leetCode-OJ-303/</id>
    <published>2016-06-22T03:00:00.000Z</published>
    <updated>2016-06-30T00:28:41.430Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -&amp;gt; 1
sumRange(2, 5) -&amp;gt; -1
sumRange(0, 5) -&amp;gt; -3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.    You may assume that the array does not change.
2.    There are many calls to sumRange function.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在本题中，sumRange可能会被调用多次，因此如果每次调用时才对下标区间的元素进行累加，会导致效率低下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class NumArray {
    public int[] nums;
    public NumArray(int[] nums) {
        this.nums = nums;
    }
    public int sumRange(int i, int j) {
        int result = 0;
        for (int counter = i; counter &amp;lt;= j; counter++) {
            result += nums[counter];
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以该方法效率低下&lt;br&gt;在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class NumArray {
    public NumArray(int[] nums) {   
    }
    public int sumRange(int i, int j) {   
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中，给出了NumArray的构造函数，所以可以在构造函数内就计算从第一个元素到当前元素所有元素的和，保存到数组sums的对应位置中，在函数sumRange中就可以很方便地算出题目中要求的结果了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class NumArray {
    private int[] dp;
    public NumArray(int[] nums) {
        dp = new int[nums.length];
        int sum = 0;
        for (int i = 0; i &amp;lt; nums.length; i++) {
            sum += nums[i];
            dp[i] = sum;
        }
    }

    public int sumRange(int i, int j) {
        return i == 0 ? dp[j] : dp[j] - dp[i - 1];
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.sumRange(1, 2);
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Dynamic Programming" scheme="http://seifzhang.jerrychia.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Coding299_Bulls_and_Cows</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-299/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-299/</id>
    <published>2016-06-21T02:58:00.000Z</published>
    <updated>2016-06-23T07:18:23.835Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;You are playing the following &lt;a href=&quot;https://en.wikipedia.org/wiki/Bulls_and_Cows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bulls and Cows&lt;/a&gt; game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Secret number:  &amp;quot;1807&amp;quot;
Friend&amp;apos;s guess: &amp;quot;7810&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hint: &lt;code&gt;1&lt;/code&gt; bull and &lt;code&gt;3&lt;/code&gt; cows. (The bull is &lt;code&gt;8&lt;/code&gt;, the cows are &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;7&lt;/code&gt;.)&lt;br&gt;Write a function to return a hint according to the secret number and friend’s guess, use &lt;code&gt;A&lt;/code&gt; to indicate the bulls and &lt;code&gt;B&lt;/code&gt; to indicate the cows. In the above example, your function should return &lt;code&gt;&amp;quot;1A3B&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Please note that both secret number and friend’s guess may contain duplicate digits, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Secret number:  &amp;quot;1123&amp;quot;
Friend&amp;apos;s guess: &amp;quot;0111&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, the 1st &lt;code&gt;1&lt;/code&gt; in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return &lt;code&gt;&amp;quot;1A1B&amp;quot;&lt;/code&gt;.&lt;br&gt;You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Coding292_Nim_Game</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-292/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-292/</id>
    <published>2016-06-21T02:56:00.000Z</published>
    <updated>2016-06-23T07:13:39.588Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.&lt;/p&gt;
&lt;p&gt;Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.&lt;/p&gt;
&lt;p&gt;For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Brainteaser" scheme="http://seifzhang.jerrychia.com/tags/Brainteaser/"/>
    
  </entry>
  
  <entry>
    <title>Coding290_Word_Pattern</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-290/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-290/</id>
    <published>2016-06-21T02:54:00.000Z</published>
    <updated>2016-06-28T06:37:08.766Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given a &lt;code&gt;pattern&lt;/code&gt; and a string &lt;code&gt;str&lt;/code&gt;, find if &lt;code&gt;str&lt;/code&gt; follows the same pattern.&lt;/p&gt;
&lt;p&gt;Here &lt;strong&gt;follow&lt;/strong&gt; means a full match, such that there is a bijection between a letter in &lt;code&gt;pattern&lt;/code&gt; and a &lt;strong&gt;non-empty&lt;/strong&gt; word in &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;abba&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog cat cat dog&amp;quot;&lt;/code&gt;should return true.&lt;/li&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;abba&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog cat cat fish&amp;quot;&lt;/code&gt; should return false.&lt;/li&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;aaaa&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog cat cat dog&amp;quot;&lt;/code&gt; should return false.&lt;/li&gt;
&lt;li&gt;pattern = &lt;code&gt;&amp;quot;abba&amp;quot;&lt;/code&gt;, str = &lt;code&gt;&amp;quot;dog dog dog dog&amp;quot;&lt;/code&gt; should return false.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;br&gt;You may assume &lt;code&gt;pattern&lt;/code&gt; contains only lowercase letters, and &lt;code&gt;str&lt;/code&gt; contains lowercase letters separated by a single space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;摘自网上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class Solution {
    public boolean wordPattern(String pattern, String str) {
       if (pattern.length() == 0 || str.length() == 0) {
            return false;
        }
        String[] strings = str.split(&amp;quot; &amp;quot;);
        if (pattern.length() != strings.length) {
            return false;
        }
        HashMap&amp;lt;Object, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        for (int i = 0; i &amp;lt; strings.length; i++) {
            if (!Objects.equals(map.put(pattern.charAt(i), i), map.put(strings[i], i))) {
                return false;
            }
        }
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[转] (&lt;a href=&quot;https://segmentfault.com/a/1190000003827151&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000003827151&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Solution {
    public boolean wordPattern(String pattern, String str) {
        Map&amp;lt;Character, String&amp;gt; map = new HashMap&amp;lt;Character, String&amp;gt;();
        Set&amp;lt;String&amp;gt; set = new HashSet&amp;lt;String&amp;gt;();
        String[] pieces = str.split(&amp;quot; &amp;quot;);
        if(pieces.length != pattern.length()) return false;
        int i = 0;
        for(String s : pieces){
            char p = pattern.charAt(i);
            System.out.println(p);
            // 如果该字符产生过映射
            if(map.containsKey(p)){
                // 且映射的字符串和当前字符串不一样
                if(!s.equals(map.get(p))) return false;
            } else {
            // 如果该字符没有产生过映射
                // 如果当前字符串已经被映射过了
                if(set.contains(s)) return false;
                // 否则新加一组映射
                map.put(p, s);
                set.add(s);
            }
            i++;
        }
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Hash Table" scheme="http://seifzhang.jerrychia.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Coding283_Move_Zeroes</title>
    <link href="http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-283/"/>
    <id>http://seifzhang.jerrychia.com/2016/06/21/leetCode-OJ-283/</id>
    <published>2016-06-21T02:52:00.000Z</published>
    <updated>2016-06-30T00:27:06.834Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt;, write a function to move all &lt;code&gt;0&lt;/code&gt;‘s to the end of it while maintaining the relative order of the non-zero elements.&lt;/p&gt;
&lt;p&gt;For example, given &lt;code&gt;nums = [0, 1, 0, 3, 12]&lt;/code&gt;, after calling your function, &lt;code&gt;nums&lt;/code&gt; should be &lt;code&gt;[1, 3, 12, 0, 0]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You must do this &lt;strong&gt;in-place&lt;/strong&gt; without making a copy of the array.&lt;/li&gt;
&lt;li&gt;Minimize the total number of operations.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;My-Algorithm&quot;&gt;&lt;a href=&quot;#My-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;My Algorithm&quot;&gt;&lt;/a&gt;My Algorithm&lt;/h2&gt;&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea:&quot;&gt;&lt;/a&gt;idea:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;把非零数字按原顺序前移，后面补0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;headerlink&quot; title=&quot;code:&quot;&gt;&lt;/a&gt;code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class lp283_Move_Zeros {
    public void moveZeroes(int[] nums) {
        int i = 0, j = 0;
        while (j &amp;lt; nums.length) {
            if (nums[j] == 0) {
                j++;
            } else {
                nums[i++] = nums[j++];
            }
        }
        while (i &amp;lt; nums.length) {
            nums[i++] = 0;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm-Description&quot;&gt;&lt;a href=&quot;#Algorithm-Description&quot; class=&quot;headerlink&quot; title=&quot;Algorithm Description&quot;&gt;&lt;/a&gt;Algorithm Description&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://seifzhang.jerrychia.com/categories/LeetCode/"/>
    
    
      <category term="Array" scheme="http://seifzhang.jerrychia.com/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://seifzhang.jerrychia.com/tags/Two-Pointers/"/>
    
  </entry>
  
</feed>
